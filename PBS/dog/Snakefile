import numpy as np
import pandas as pd
rule all:
    input: 'final/ranked.txt'

rule get_outliers:
    input: 'vr_vvEU_vvNA_qc_ind66cov1pval5_snps_noIntrogressed_1snp1snp'
    output: 'final/outliers.bed'
    run:
         df = pd.read_csv(input[0], '\t', header=None, names=["chr","pos_start", "pos_end", "fst01_w", "fst02_w", "fst12_w", "fst01_uw", "fst02_uw", "fst12_uw","PBS0_w", "PBS1_w", "PBS2_w", "PBS0_uw","PBS1_uw", "PBS2_uw","nsites"])
         #condition = (df.nsites  > 10)
         #df = df[condition]
         #print(df.shape)
         df = df.sort_values(by="PBS1_w", ascending=False)
         df.to_csv(output[0], '\t', header=False, index=False)

rule simplify_outliers:
    input: 'final/outliers.bed'
    output: 'final/outliers_simple.bed'
    shell:
        'cut -f 1,2,3,10,11,12,16 {input} > {output}'

rule bedtools_sort:
    input: 'final/outliers_simple.bed'
    output: 'final/outliers.sorted.bed'
    shell:
        'bedtools sort -i {input} > {output}'


rule bedtools_map:
    input:
        #'/space/s1/joana/refgenomes/Canis_familiraris/scaffolds_length.bed',
        'final/outliers.sorted.bed',
        '/space/s1/joana/refgenomes/Functional_annotation/bedmap/genesDog.sorted.bed'
    output:
        'final/outlier_genes.bed'
    shell:
        #'bedtools slop -b 50000 -g {input[0]} -i {input[1]} | bedtools map -a stdin -b {input[2]} -c 4 -o distinct | sort -k5,5gr  > {output}'
        'bedtools map -a {input[0]} -b {input[1]} -c 4 -o distinct | sort -k 5,5gr > {output}' #### assumes the column of the file (PBS0,1,2)

rule rank_genes:
    input: 'final/outlier_genes.bed'
    output: 'final/ranked.txt'
    run:
        df = pd.read_csv(input[0], '\t', header = None)
        print(df)
        genes = df[7].apply(lambda x: x.split(",")).values
        genes = [list(set([gene for gene in gene_list if gene != "."])) for gene_list in     genes]
        genes = [gene_list for gene_list in genes if len(gene_list) == 1]
        genes = np.concatenate(genes)
        genes = pd.unique(genes)
        pd.DataFrame(genes).to_csv(output[0], index=False, header=False)






